syntax = "proto3";
package tibc.lightclients.tendermint.v1;

option go_package = "github.com/bianjieai/tibc-go/modules/tibc/light-clients/07-tendermint/types";

import "tendermint/types/validator.proto";
import "tendermint/types/types.proto";
import "confio/proofs.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "tibc/core/client/v1/client.proto";
import "tibc/core/commitment/v1/commitment.proto";
import "gogoproto/gogo.proto";

// ClientState from Tendermint tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  Fraction trust_level = 2 [ (gogoproto.nullable) = false ];
  // duration of the period since the LastestTimestamp during which the
  // submitted headers are valid for upgrade
  google.protobuf.Duration trusting_period = 3
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
  // duration of the staking unbonding period
  google.protobuf.Duration unbonding_period = 4
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
  // defines how much new (untrusted) header's Time can drift into the future.
  google.protobuf.Duration max_clock_drift = 5
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
  // latest height the client was updated to
  tibc.core.client.v1.Height latest_height = 6 [ (gogoproto.nullable) = false ];
  // proof specifications used in verifying counterparty state
  repeated ics23.ProofSpec proof_specs = 7;
  // commitment merkle prefix of the counterparty chain.
  tibc.core.commitment.v1.MerklePrefix MerklePrefix = 8
      [ (gogoproto.nullable) = false ];
  // period of transaction confirmation delay
  uint64 timeDelay = 9;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1
      [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
  // commitment root (i.e app hash)
  tibc.core.commitment.v1.MerkleRoot root = 2 [ (gogoproto.nullable) = false ];
  bytes next_validators_hash = 3
      [ (gogoproto.casttype) =
            "github.com/tendermint/tendermint/libs/bytes.HexBytes" ];
}

// Header defines the Tendermint client consensus Header.
// It encapsulates all the information necessary to update from a trusted
// Tendermint ConsensusState. The inclusion of TrustedHeight and
// TrustedValidators allows this update to process correctly, so long as the
// ConsensusState for the TrustedHeight exists, this removes race conditions
// among relayers The SignedHeader and ValidatorSet are the new untrusted update
// fields for the client. The TrustedHeight is the height of a stored
// ConsensusState on the client that will be used to verify the new untrusted
// header. The Trusted ConsensusState must be within the unbonding period of
// current time in order to correctly verify, and the TrustedValidators must
// hash to TrustedConsensusState.NextValidatorsHash since that is the last
// trusted validator set at the TrustedHeight.
message Header {
  .tendermint.types.SignedHeader signed_header = 1 [ (gogoproto.embed) = true ];
  .tendermint.types.ValidatorSet validator_set = 2;
  tibc.core.client.v1.Height trusted_height = 3
      [ (gogoproto.nullable) = false ];
  .tendermint.types.ValidatorSet trusted_validators = 4;
}

// Fraction defines the protobuf message type for tmmath.Fraction that only
// supports positive values.
message Fraction {
  uint64 numerator = 1;
  uint64 denominator = 2;
}
